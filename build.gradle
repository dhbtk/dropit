allprojects {
    apply plugin: 'maven'
    apply plugin: 'io.gitlab.arturbosch.detekt'

    group = 'io.edanni'
    version = '0.1'

    repositories {
        google()
        jcenter()
        mavenLocal()
        maven { url "https://dl.bintray.com/arrow-kt/arrow-kt/" }
        maven { url 'https://oss.jfrog.org/artifactory/oss-snapshot-local/' }
    }

    detekt {
        toolVersion = rootProject.ext.detekt_version
        input = files("src/main/kotlin")
        filters = ".*/resources/.*,.*/build/.*"
        config = files(rootProject.projectDir.toString() + "/detekt-config.yml")
    }

    // versions

    // core
    ext.kotlin_version = rootProject.ext.kotlin_version
    ext.dagger_version = '2.19'
    ext.junit_jupiter_version = '5.3.2'
    ext.spek_version = '2.0.0-rc.1'

    // desktop - server
    ext.sqlite_version = rootProject.ext.sqlite_version
    ext.flyway_version = '5.2.4'
    ext.jooq_plugin_version = '3.0.2'
    ext.hikari_version = '2.7.8'
    ext.slf4j_version = '1.7.22'
    ext.logback_version = '1.2.3'
    ext.javalin_version = '2.4.0'
    ext.jackson_version = '2.9.8'
    ext.lang3_version = '3.8.1'
    ext.fileupload_version = '1.3.3'
    ext.arrow_version = '0.9.0'

    // desktop - UI
    ext.swt_artifact = getSwtArtifact()
    ext.swt_version = '3.108.0'

    // client
    ext.retrofit_version = '2.5.0'
    ext.rxjava_version = '2.2.4'

    // android
    ext.support_version = '27.1.1'
    ext.anko_version = '0.10.8'
    ext.retrofuture_version = '1.7.0'

    ext.desktopClassifier = getDesktopClassifier()
    ext.isWindowsBuild = isWindowsBuild()
    ext.isMacBuild = isMacBuild()
}

static def getSwtArtifact() {
    switch (System.getProperty("targetPlatform")) {
        case "win32":
            return "win32.win32.x86"
        case "osx":
            return "cocoa.macosx.x86_64"
        case "linux":
            return "gtk.linux.x86_64"
        default:
            return getDefaultSwtRuntime()
    }
}

static def getDefaultSwtRuntime() {
    def osName = System.getProperty("os.name").toLowerCase()
    if(osName.contains("mac os")) {
        return "cocoa.macosx.x86_64"
    } else if(osName.contains("windows")) {
        return "win32.win32.x86_64"
    } else {
        return "gtk.linux.x86_64"
    }
}

static def getDesktopClassifier() {
    switch (System.getProperty("desktop.platform")) {
        case "win32":
            return "win32"
        case "osx":
            return "osx"
        default:
            return "linux"
    }
}

static def isWindowsBuild() {
    return getSwtArtifact() == "win32.win32.x86_64"
}

static def isMacBuild() {
    return getSwtArtifact() == "cocoa.macosx.x86_64"
}

buildscript {
    ext.kotlin_version = '1.3.11'
    ext.sqlite_version = '3.21.0.1'
    ext.detekt_version = '1.0.0-RC12'

    repositories {
        google()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detekt_version"
        classpath group: 'org.xerial', name: 'sqlite-jdbc', version: sqlite_version

        // jooq workaround
        classpath 'org.glassfish.jaxb:jaxb-runtime:2.3.1'
    }
}

subprojects {
    repositories {
        mavenLocal()

        maven { url "http://dl.bintray.com/kotlin/kotlinx" }
        maven { url "http://jcenter.bintray.com" }
        maven { url "https://dl.bintray.com/spekframework/spek-dev" }
        maven { url "http://repo.maven.apache.org/maven2" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "http://maven-eclipse.github.io/maven" }
    }
}
