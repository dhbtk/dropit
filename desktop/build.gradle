import java.nio.file.Files

plugins {
    id "org.jetbrains.kotlin.jvm"
    id "org.jetbrains.kotlin.kapt"
    id "org.flywaydb.flyway" version '5.2.4'
    id 'nu.studer.jooq' version '3.0.2'
    id 'com.github.johnrengelman.shadow' version '4.0.3'
    id 'application'
    id 'edu.sc.seis.launch4j' version '2.4.4'
}

description = ''
sourceCompatibility = 1.8
targetCompatibility = 1.8
def buildDbPath = Files.createTempFile("dropit-build", ".db").toFile()
buildDbPath.deleteOnExit()

mainClassName = 'dropit.ApplicationKt'
applicationName = 'DropIt'
shadowJar {
    baseName = 'dropit-desktop'
    classifier = getDesktopClassifier()
}
launch4j {
    icon = "${projectDir}/desktop.ico"
    outfile = "${project.applicationName}.exe"
    mainClassName = project.mainClassName
    copyConfigurable = project.tasks.shadowJar.outputs.files
    jar = "lib/${project.tasks.shadowJar.archiveName}"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    compile project(':common')
    compile group: 'org.xerial', name: 'sqlite-jdbc', version: sqlite_version
    jooqRuntime group: 'org.xerial', name: 'sqlite-jdbc', version: sqlite_version

    compile group: 'com.zaxxer', name: 'HikariCP', version: hikari_version
    compile group: 'org.flywaydb', name: 'flyway-core', version: flyway_version
    compile group: 'org.jooq', name: 'jooq'
    compile group: 'org.slf4j', name: 'jul-to-slf4j', version: slf4j_version
    compile group: 'ch.qos.logback', name: 'logback-classic', version: logback_version
    compile group: 'com.google.dagger', name: 'dagger', version: dagger_version
    compile group: 'io.javalin', name: 'javalin', version: javalin_version
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jackson_version
    compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: jackson_version
    compile group: 'org.apache.commons', name: 'commons-lang3', version: lang3_version
    compile group: 'commons-fileupload', name: 'commons-fileupload', version: fileupload_version
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_version
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlin_version

    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit_jupiter_version
    testCompile group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit5', version: kotlin_version
    testImplementation ("org.spekframework.spek2:spek-dsl-jvm:$spek_version")  {
        exclude group: 'org.jetbrains.kotlin'
    }
    testRuntimeOnly ("org.spekframework.spek2:spek-runner-junit5:$spek_version") {
        exclude group: 'org.junit.platform'
        exclude group: 'org.jetbrains.kotlin'
    }

    // UI
    compile("org.eclipse.platform:org.eclipse.swt.$swt_artifact:$swt_version") {
        exclude group: 'org.eclipse.platform'
    }
    compile("org.eclipse.platform:org.eclipse.swt:$swt_version") {
        exclude group: 'org.eclipse.platform'
    }

    kapt group: 'com.google.dagger', name: 'dagger-compiler', version: dagger_version
}

test {
    useJUnitPlatform {
        includeEngines 'spek2'
    }
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
    }
}

clean {
    delete buildDbPath
}

flyway {
    url = "jdbc:sqlite:$buildDbPath"
}

jooq {
    desktop(sourceSets.main) {
        jdbc {
            driver = 'org.sqlite.JDBC'
            url = "jdbc:sqlite:$buildDbPath"
        }
        generator {
            database {
                includes = '.*'
                excludes = 'flyway_schema_history'
                includeSequences = false
                includePrimaryKeys = false
                includeUniqueKeys = false
                includeForeignKeys = false
            }
            target {
                packageName = 'dropit.jooq'
            }
        }
    }
}

tasks.generateDesktopJooqSchemaSource.dependsOn(flywayMigrate)

tasks.compileKotlin.dependsOn(generateDesktopJooqSchemaSource)